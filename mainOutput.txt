PS C:\Users\khushbu\OneDrive\Desktop\Compile> cd "c:\Users\khushbu\OneDrive\Desktop\Compiler\compiler\" ; if ($?) { g++ answer.cpp -o answer } ; if ($?) { .\answer }
PS C:\Users\khushbu\OneDrive\Desktop\Compile> cd "c:\Users\khushbu\OneDrive\Desktop\Compiler\compiler\" ; if ($?) { g++ answer.cpp -o answer } ; if ($?) { .\anPS C:\Users\khushbu\OneDrive\Desktop\Compile> cd "c:\Users\khushbu\OneDrive\Desktop\Compiler\compiler\" ; if ($?) { g++ answer.cpp -o answer } ; if ($?) { .\anPS C:\Users\khushbu\OneDrive\Desktop\Compile> cd "c:\Users\khushbu\OneDrive\Desktop\Compiler\compiler\" ; if ($?) { g++ answer.cpp -o answer } ; if ($?) { .\anPS C:\Users\khushbu\OneDrive\Desktop\Compile> cd "c:\Users\khushbu\OneDrive\Desktop\Compiler\compiler\" ; if ($?) { g++ answer.cpp -o answer } ; if ($?) { .\anPS C:\Users\khushbu\OneDrive\Desktop\Compile> cd "c:\Users\khushbu\OneDrive\Desktop\Compiler\compiler\" ; if ($?) { g++ answer.cpp -o answer } ; if ($?) { .\anPS C:\Users\khushbu\OneDrive\Desktop\Compile> cd "c:\Users\khushbu\OneDrive\Desktop\Compiler\compiler\" ; if ($?) { g++ answer.cpp -o answer } ; if ($?) { .\anPS C:\Users\khushbu\OneDrive\Desktop\Compile> cd "c:\Users\khushbu\OneDrive\Desktop\Compiler\compiler\" ; if ($?) { g++ answer.cpp -o answer } ; if ($?) { .\anPS C:\Users\khushbu\OneDrive\Desktop\Compile> cd "c:\PS C:\Users\khushbu\OneDrive\Desktop\Compile> cd "c:\Users\khushbu\OneDrive\Desktop\Compiler\compiler\" ; if ($?) { g++ answer.cpp -o answer } ; if ($?) { .\answer }
C:\Users\khushbu\AppData\Local\Temp\ccaH4eli.o:answer.cpp:(.text+0xf): undefined reference to `calculate_exp'
C:\Users\khushbu\AppData\Local\Temp\ccaH4eli.o:answer.cpp:(.text+0x14): undefined reference to `t1'       
collect2.                                            
PS C:\Users\khushbu\OneDrive\Desktop\Compiler\compiler> ./output.exe
PS C:\Users\khushbu\OneDrive\Desktop\Compiler\compiler> type output.asm
section .data
    global x, t1  ; Make these variables accessible
    x: dd 0
    t1: dd 0 
    t10: dd 0
    t11: dd 0
    t2: dd 0
    t3: dd 0
    t4: dd 0
    t5: dd 0
    t6: dd 0
    t7: dd 0
    t8: dd 0
    t9: dd 0

section .text
global _start

_start:

_pow:
    ; Input: eax = base, ecx = exponent
    ; Output: eax = result
    push ebx
    mov ebx, eax
    mov eax, 1
    cmp ecx, 0
    je .pow_end
.pow_loop:
    imul eax, ebx
    dec ecx
    jnz .pow_loop
.pow_end:
    pop ebx
    ret

    ; t1 =  e x
    mov [t1], eax

    ; t2 = 1 + x
    mov eax, 1
    add eax, [x]
    mov [t2], eax

    ; t3 = x ^ 2
    mov eax, [x]
    mov ecx, 2
    call _pow
    mov [t3], eax

    ; t4 = t3 / 2
    mov eax, [t3]
    cdq
    mov ebx, 2
    idiv ebx
    mov [t4], eax

    ; t5 = t2 + t4
    mov eax, [t2]
    add eax, [t4]
    mov [t5], eax

    ; t6 = x ^ 3
    mov eax, [x]
    mov ecx, 3
    call _pow
    mov [t6], eax

    ; t7 = t6 / 6
    mov eax, [t6]
    cdq
    mov ebx, 6
    idiv ebx
    mov [t7], eax

    ; t8 = t5 + t7
    mov eax, [t5]
    add eax, [t7]
    mov [t8], eax

    ; t9 = x ^ 4
    mov eax, [x]
    mov ecx, 4
    call _pow
    mov [t9], eax

    ; t10 = t9 / 24
    mov eax, [t9]
    cdq
    mov ebx, 24
    idiv ebx
    mov [t10], eax

    ; t11 = t8 + t10
    mov eax, [t8]
    add eax, [t10]
    mov [t11], eax

    ; t1 = t11
    mov [t1], eax

    ; Exit program
    mov eax, 1
    xor ebx, ebx
    int 0x80
PS C:\Users\khushbu\OneDrive\Desktop\Compiler\compiler> objdump -d -M intel output.exe

output.exe:     file format pei-i386


Disassembly of section .text:

00401000 <_start>:
  401000:       53                      push   ebx   
  401001:       89 c3                   mov    ebx,eax
  401003:       b8 01 00 00 00          mov    eax,0x1
  401008:       83 f9 00                cmp    ecx,0x0
  40100b:       74 06                   je     401013 <_pow.pow_end>

0040100d <_pow.pow_loop>:
  40100d:       0f af c3                imul   eax,ebx
  401010:       49                      dec    ecx   
  401011:       75 fa                   jne    40100d <_pow.pow_loop>

00401013 <_pow.pow_end>:
  401013:       5b                      pop    ebx   
  401014:       c3                      ret
  401015:       a3 04 20 40 00          mov    ds:0x402004,eax
  40101a:       b8 01 00 00 00          mov    eax,0x1
  40101f:       03 05 00 20 40 00       add    eax,DWORD PTR ds:0x402000
  401025:       a3 10 20 40 00          mov    ds:0x402010,eax
  40102a:       a1 00 20 40 00          mov    eax,ds:0x402000
  40102f:       b9 02 00 00 00          mov    ecx,0x2
  401034:       e8 c7 ff ff ff          call   401000 <_start>
  401039:       a3 14 20 40 00          mov    ds:0x402014,eax
  40103e:       a1 14 20 40 00          mov    eax,ds:0x402014
  401043:       99                      cdq
  401044:       bb 02 00 00 00          mov    ebx,0x2
  401049:       f7 fb                   idiv   ebx
  40104b:       a3 18 20 40 00          mov    ds:0x402018,eax
  401050:       a1 10 20 40 00          mov    eax,ds:0x402010
  401055:       03 05 18 20 40 00       add    eax,DWORD PTR ds:0x402018
  40105b:       a3 1c 20 40 00          mov    ds:0x40201c,eax
  401060:       a1 00 20 40 00          mov    eax,ds:0x402000
  401065:       b9 03 00 00 00          mov    ecx,0x3
  40106a:       e8 91 ff ff ff          call   401000 <_start>
  40106f:       a3 20 20 40 00          mov    ds:0x402020,eax
  401074:       a1 20 20 40 00          mov    eax,ds:0x402020
  401079:       99                      cdq    
  40107a:       bb 06 00 00 00          mov    ebx,0x6
  40107f:       f7 fb                   idiv   ebx   
  401081:       a3 24 20 40 00          mov    ds:0x402024,eax
  401086:       a1 1c 20 40 00          mov    eax,ds:0x40201c
  40108b:       03 05 24 20 40 00       add    eax,DWORD PTR ds:0x402024
  401091:       a3 28 20 40 00          mov    ds:0x402028,eax
  401096:       a1 00 20 40 00          mov    eax,ds:0x402000
  40109b:       b9 04 00 00 00          mov    ecx,0x4
  4010a0:       e8 5b ff ff ff          call   401000 <_start>
  4010a5:       a3 2c 20 40 00          mov    ds:0x40202c,eax
  4010aa:       a1 2c 20 40 00          mov    eax,ds:0x40202c
  4010af:       99                      cdq
  4010b0:       bb 18 00 00 00          mov    ebx,0x18
  4010b5:       f7 fb                   idiv   ebx   
  4010b7:       a3 08 20 40 00          mov    ds:0x402008,eax
  4010bc:       a1 28 20 40 00          mov    eax,ds:0x402028
  4010c1:       03 05 08 20 40 00       add    eax,DWORD PTR ds:0x402008
  4010c7:       a3 0c 20 40 00          mov    ds:0x40200c,eax
  4010cc:       a3 04 20 40 00          mov    ds:0x402004,eax
  4010d1:       b8 01 00 00 00          mov    eax,0x1
  4010d6:       31 db                   xor    ebx,ebx
  4010d8:       cd 80                   int    0x80  

004010da <__CTOR_LIST__>:
  4010da:       ff                      (bad)        
  4010db:       ff                      (bad)        
  4010dc:       ff                      (bad)        
  4010dd:       ff 00                   inc    DWORD PTR [eax]
  4010df:       00 00                   add    BYTE PTR [eax],al
        ...

004010e2 <__DTOR_LIST__>:
  4010e2:       ff                      (bad)        
  4010e3:       ff                      (bad)        
  4010e4:       ff                      (bad)        
  4010e5:       ff 00                   inc    DWORD PTR [eax]
  4010e7:       00 00                   add    BYTE PTR [eax],al
        ...
PS C:\Users\khushbu\OneDrive\Desktop\Compiler\compiler> objdump -d -M intel output.obj

output.obj:     file format pe-i386


Disassembly of section .text:

00000000 <_start>:
   0:   53                      push   ebx
   1:   89 c3                   mov    ebx,eax       
   3:   b8 01 00 00 00          mov    eax,0x1       
   8:   83 f9 00                cmp    ecx,0x0
   b:   74 06                   je     13 <_pow.pow_end>

0000000d <_pow.pow_loop>:
   d:   0f af c3                imul   eax,ebx       
  10:   49                      dec    ecx
  11:   75 fa                   jne    d <_pow.pow_loop>

00000013 <_pow.pow_end>:
  13:   5b                      pop    ebx
  14:   c3                      ret
  15:   a3 04 00 00 00          mov    ds:0x4,eax    
  1a:   b8 01 00 00 00          mov    eax,0x1       
  1f:   03 05 00 00 00 00       add    eax,DWORD PTR ds:0x0
  25:   a3 10 00 00 00          mov    ds:0x10,eax   
  2a:   a1 00 00 00 00          mov    eax,ds:0x0    
  2f:   b9 02 00 00 00          mov    ecx,0x2       
  34:   e8 c7 ff ff ff          call   0 <_start>    
  39:   a3 14 00 00 00          mov    ds:0x14,eax   
  3e:   a1 14 00 00 00          mov    eax,ds:0x14   
  43:   99                      cdq    
  44:   bb 02 00 00 00          mov    ebx,0x2       
  49:   f7 fb                   idiv   ebx
  4b:   a3 18 00 00 00          mov    ds:0x18,eax   
  50:   a1 10 00 00 00          mov    eax,ds:0x10   
  55:   03 05 18 00 00 00       add    eax,DWORD PTR ds:0x18
  5b:   a3 1c 00 00 00          mov    ds:0x1c,eax   
  60:   a1 00 00 00 00          mov    eax,ds:0x0    
  65:   b9 03 00 00 00          mov    ecx,0x3       
  6a:   e8 91 ff ff ff          call   0 <_start>    
  6f:   a3 20 00 00 00          mov    ds:0x20,eax
  74:   a1 20 00 00 00          mov    eax,ds:0x20
  79:   99                      cdq
  7a:   bb 06 00 00 00          mov    ebx,0x6
  7f:   f7 fb                   idiv   ebx
  81:   a3 24 00 00 00          mov    ds:0x24,eax
  86:   a1 1c 00 00 00          mov    eax,ds:0x1c
  8b:   03 05 24 00 00 00       add    eax,DWORD PTR ds:0x24
  91:   a3 28 00 00 00          mov    ds:0x28,eax
  96:   a1 00 00 00 00          mov    eax,ds:0x0
  9b:   b9 04 00 00 00          mov    ecx,0x4
  a0:   e8 5b ff ff ff          call   0 <_start>
  a5:   a3 2c 00 00 00          mov    ds:0x2c,eax
  aa:   a1 2c 00 00 00          mov    eax,ds:0x2c
  af:   99                      cdq
  b0:   bb 18 00 00 00          mov    ebx,0x18
  b5:   f7 fb                   idiv   ebx
  b7:   a3 08 00 00 00          mov    ds:0x8,eax
  bc:   a1 28 00 00 00          mov    eax,ds:0x28
  c1:   03 05 08 00 00 00       add    eax,DWORD PTR ds:0x8
  c7:   a3 0c 00 00 00          mov    ds:0xc,eax
  cc:   a3 04 00 00 00          mov    ds:0x4,eax
  d1:   b8 01 00 00 00          mov    eax,0x1
  d6:   31 db                   xor    ebx,ebx
  d8:   cd 80                   int    0x80
PS C:\Users\khushbu\OneDrive\Desktop\Compiler\compiler> g++ main.cpp lexer.cpp parser.cpp semantic.cpp icg.cpp codegen.cpp -o compiler      
PS C:\Users\khushbu\OneDrive\Desktop\Compiler\compiler> ./compiler
Input file read successfully.
Lexical analysis completed. Tokens: 27
Parsing successful.
Semantic analysis passed.
3-address code (TAC) generation completed.
Assembly code written to output.asm
Successfully created output.txt
PS C:\Users\khushbu\OneDrive\Desktop\Compiler\compiler>